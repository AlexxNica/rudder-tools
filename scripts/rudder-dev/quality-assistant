#!/usr/bin/env python
# coding: utf8

"""
Pull-request quality tool.

You need a configuration file, if you don't have one, the tool will create one for you at first run.

Usage:
        quality-assistant -h|--help
        quality-assistant merge all
        quality-assistant merge <repo>
        quality-assistant autolabel all
        quality-assistant autolabel <repo>
"""

from __future__ import print_function

import os
from common import *
from github import *

import docopt # apt-get install python-docopt || pip install docopt
from pprint import pprint

try:
  import urllib3
  urllib3.disable_warnings()
except:
  pass

try:
  requests.packages.urllib3.disable_warnings()
except:
  pass


def clean_repo(repo):
  redirect = ""
  if Config.LOGLEVEL == "error":
    redirect = " >/dev/null"
  # check master directory
  directory = Config.WORKING_DIRECTORY
  if not os.path.isdir(directory):
    logfail("Master directory doesn't exist, exiting")
    exit(1)
  # check working directory
  directory = directory + "/" + repo
  if not os.path.isdir(directory):
    os.chdir(Config.WORKING_DIRECTORY)
    shell("rudder-dev clone "+repo+redirect, "Cloning ncf in a temporary directory")
  # cleanup working directory
  os.chdir(directory)
  shell("git reset --hard"+redirect, "Cleanup working directory")


def repo_merge(repo):
  api_url = "https://api.github.com/repos/Normation/{repo}/issues?labels="+Config.PR_VALIDATED_LABEL
  url = api_url.format(repo=repo)
  data = github_call(url)
  for pr_info in data:
    labels = [l['name'] for l in pr_info['labels']]
    if Config.BOT_CANNOT_MERGE_LABEL in labels:
      continue
    pr_merge(repo, pr_info['html_url'])


def reassign(title, status):
  # find issue matching PR title
  match=re.match(r'^Fixes #(\d+)', title)
  if match:
    issue_id = match.group(1)
    issue = Issue(issue_id)
    # find user matching the author in redmine
    for user in issue.server.list_nrm_users():
      if "custom_fields" in user:
        for field in user["custom_fields"]:
          if field["name"] == "GitHub":
            if "value" in field:
              if field["value"] == pr.author():
                uid = user ["id"]
    if uid != -1:
      issue.to_status(status, uid)
 

def pr_merge(repo, url):
  redirect = ""
  if Config.LOGLEVEL == "info" or Config.LOGLEVEL == "error":
    redirect = " > /dev/null 2>/dev/null"
  clean_repo(repo)
  pr = PR(url)
  command = "rudder-dev merge " + url + " --automatic"
  (code, output, stderr) = shell(command + " --test", "Trying to merge PR " + url, fail_exit=False, keep_output=True, keep_error=True)
  log = "-- stdout -- \n" + output + "\n-- stderr --\n" + stderr
  if not (Config.LOGLEVEL == "info" or Config.LOGLEVEL == "error"):
    print(log)
  if code == 127:
    # extract 15 first lines of (error then output) to limit comment size
    lines = (log).split('\n')
    msg = "\n" . join(lines[:5]) + "\n[...]\n" + "\n".join(lines[-10:]) 
    comment="""This PR breaks """ + Config.QA_TEST + """
```
""" + msg + """
```
You should run ./""" + Config.QA_TEST + """ in your repository to make sure it works.
You can also run `rudder-dev merge """ + url + """ --test` to test with upmerging.
After this, you can remove the """ + Config.PR_VALIDATED_LABEL + """ tag
-- Your faithful QA"""
    pr.comment(comment)
    pr.unlabel(Config.PR_VALIDATED_LABEL)
    reassign(Config.DISCUSSION_CODE)
  elif code != 0:
    # PR must be manually merged
    comment="""This PR is not mergeable to upper versions.
Since it is "Ready for merge" you must merge it by yourself using the following command:
`rudder-dev merge """ + url + """`
-- Your faithful QA"""
    pr.comment(comment)
    pr.label(Config.BOT_CANNOT_MERGE_LABEL)
    reassign(Config.PENDING_MERGE_CODE)
  else:
    # PR can be automatically merged
    shell(command + redirect, "Automatically merging PR " + url)


def repo_merge_all():
  for repo in Config.REPOSITORIES:
    repo_merge(repo)


def manage_label(repo, name, color):
  get_url = "https://api.github.com/repos/Normation/{repo}/labels/{name}".format(repo=repo, name=name)
  label = github_call(get_url, fail_ok=True)
  if label is None:
    # no such label, create it
    create_url = "https://api.github.com/repos/Normation/{repo}/labels".format(repo=repo)
    data = '{"name": "' + name + '", "color": "' + color + '" }'
    print("- Creating label: " + name)
    github_call(create_url, post_data=data)
  else:
    # check label color
    if label['color'] != color:
      data = '{"name": "' + name + '", "color": "' + color + '" }'
      print("- Updating color of label: " + name)
      github_call(get_url, post_data=data, method="PATCH")

def autolabel(repo):
  manage_label(repo, Config.BOT_CANNOT_MERGE_LABEL, Config.BOT_CANNOT_MERGE_COLOR)
  manage_label(repo, Config.PR_VALIDATED_LABEL, Config.PR_VALIDATED_COLOR)

def autolabel_all():
  for repo in Config.REPOSITORIES:
    print("Repo: " + repo)
    autolabel(repo)


if __name__ == "__main__":
  arguments = docopt.docopt(__doc__)
  section = "quality-assistant"
  read_configuration(section)
  # qa specific configuration
  Config.WORKING_DIRECTORY = get_config("working_directory", "No 'working_directory' entry in " + Config.CONFIG_FILE, section)
  Config.LOGLEVEL = get_config("loglevel", "No 'loglevel' entry in " + Config.CONFIG_FILE, section) # verbose, info, error

  if arguments['merge'] and arguments['all']:
    repositories = get_config("repos", "No 'repositories' list in " + Config.CONFIG_FILE, section)
    Config.REPOSITORIES = re.split(r'[ ,]+', repositories)
    repo_merge_all()
  elif arguments['merge']:
    repo_merge(arguments['<repo>'])
  elif arguments['autolabel'] and arguments['all']:
    repositories = get_config("repos", "No 'repositories' list in " + Config.CONFIG_FILE, section)
    Config.REPOSITORIES = re.split(r'[ ,]+', repositories)
    autolabel_all()
  elif arguments['autolabel']:
    autolabel(arguments['<repo>'])

